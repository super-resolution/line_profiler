{"parents": [{"link": "../../", "title": "Module code"}], "title": "controllers.utility", "body": "<h1>Source code for controllers.utility</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Utility package for image processing featuring funtcions like:</span>\n<span class=\"sd\"> * Create gradient images</span>\n<span class=\"sd\"> * Compute the orientation and position line resembling patterns in an image.</span>\n<span class=\"sd\"> * Fit functions to a one dimensional dataset and save the plot in a given path</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numba</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage.morphology</span> <span class=\"k\">import</span> <span class=\"n\">skeletonize_3d</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage.measure</span> <span class=\"k\">import</span> <span class=\"n\">label</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.neighbors</span> <span class=\"k\">import</span> <span class=\"n\">NearestNeighbors</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy.interpolate</span> <span class=\"k\">import</span> <span class=\"n\">UnivariateSpline</span>\n<span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"k\">import</span> <span class=\"n\">ndimage</span>\n\n\n<div class=\"viewcode-block\" id=\"create_gradient_image\"><a class=\"viewcode-back\" href=\"../../../controllers.utility/#controllers.utility.create_gradient_image\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">create_gradient_image</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">blur</span><span class=\"p\">,</span> <span class=\"n\">sobel</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Compute the Orientation of each pixel of a given image in rad</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    image: ndarray</span>\n<span class=\"sd\">        Image data as numpy array in grayscale</span>\n<span class=\"sd\">    blur: int</span>\n<span class=\"sd\">        Blur image with a filter of blur kernel size</span>\n<span class=\"sd\">    sobel(optional): int</span>\n<span class=\"sd\">        Kernel size of the applied sobel operators</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    gradient_image: ndarray</span>\n<span class=\"sd\">        ndarray of the pixel orientation in a box of &quot;sobel&quot; size (unit = rad)</span>\n\n<span class=\"sd\">    Example</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    &gt;&gt;&gt; image = cv2.imread(&quot;path_to_file.png&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; gradient_image = create_gradient_image(image, 3)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">image_b</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">blur</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">blur</span><span class=\"p\">,</span> <span class=\"n\">blur</span><span class=\"p\">))</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">Sobel</span><span class=\"p\">(</span><span class=\"n\">image_b</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">),</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">CV_64F</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ksize</span><span class=\"o\">=</span><span class=\"n\">sobel</span><span class=\"p\">)</span>\n    <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">Sobel</span><span class=\"p\">(</span><span class=\"n\">image_b</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">),</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">CV_64F</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ksize</span><span class=\"o\">=</span><span class=\"n\">sobel</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arctan2</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"compute_line_orientation\"><a class=\"viewcode-back\" href=\"../../../controllers.utility/#controllers.utility.compute_line_orientation\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">compute_line_orientation</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">blur</span><span class=\"p\">,</span> <span class=\"n\">min_len</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">spline</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">expansion</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">expansion2</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Compute the orientation and position of line resembling patterns in an image.</span>\n\n<span class=\"sd\">    The image is convolved with a gaussian blur compensating for noise discontinuity or holes.</span>\n<span class=\"sd\">    A thresholding algorithm (1) converts the image from grayscale to binary. Using Lees algorithm (2)</span>\n<span class=\"sd\">    the expanded lines are reduced to one pixel width. The pixel coordinates from all still connected lines</span>\n<span class=\"sd\">    are retrieved and tested for continuity. Points of discontinuity are used as breakpoints and all following</span>\n<span class=\"sd\">    coordinates connected to a new line. Lines, shorter than the minimum required length are discarted.</span>\n<span class=\"sd\">    An univariate spline of degree 3 is fitted to each line. Note that shape and gradient of the line depend on the</span>\n<span class=\"sd\">    smoothing parameter. The rounded coordinates and their derivatives are returned in a table,</span>\n<span class=\"sd\">    together with the length of each line.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    image: ndarray</span>\n<span class=\"sd\">        Image containing line resembling patterns</span>\n<span class=\"sd\">    blur: int</span>\n<span class=\"sd\">        Amount of blur to apply to the image. Should be in the order of magnitude of the line width in pixel.</span>\n<span class=\"sd\">    min_len: int</span>\n<span class=\"sd\">        Minimal accepted line length</span>\n<span class=\"sd\">    smooth: float</span>\n<span class=\"sd\">        Positive smoothing factor used to choose the number of knots</span>\n<span class=\"sd\">    spline: int</span>\n<span class=\"sd\">        Degree of the smoothing spline. Must be &lt;= 5. Default is 3, a cubic spline.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    gradient_fitted_table: ndarray</span>\n<span class=\"sd\">        X, Y position of the splines. X, Y values of the spline gradient.</span>\n<span class=\"sd\">    shapes: ndarray</span>\n<span class=\"sd\">        Lengths of the lines written in gradient_fitted_table.</span>\n\n<span class=\"sd\">    References</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    (1)  Nobuyuki Otsu: A threshold selection method from grey level histograms.</span>\n<span class=\"sd\">    In: IEEE Transactions on Systems, Man, and Cybernetics. New York, 9.1979, S. 62\u201366. ISSN 1083-4419</span>\n\n<span class=\"sd\">    (2)  T.-C. Lee, R.L. Kashyap and C.-N. Chu,</span>\n<span class=\"sd\">    Building skeleton models via 3-D medial surface/axis thinning algorithms.</span>\n<span class=\"sd\">    Computer Vision, Graphics, and Image Processing, 56(6):462-478, 1994.</span>\n\n<span class=\"sd\">    Example</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    &gt;&gt;&gt; import matplotlib.pyplot as plt</span>\n<span class=\"sd\">    &gt;&gt;&gt; from src.controllers.utility import *</span>\n<span class=\"sd\">    &gt;&gt;&gt; import tifffile as tif</span>\n<span class=\"sd\">    &gt;&gt;&gt; import os</span>\n<span class=\"sd\">    &gt;&gt;&gt;</span>\n<span class=\"sd\">    &gt;&gt;&gt; with tif.TiffFile(os.path.dirname(os.getcwd()) + r&quot;\\test_data_microtub\\Expansion dSTORM-Line Profile test.tif&quot;) as file:</span>\n<span class=\"sd\">    &gt;&gt;&gt;     image = file.asarray().astype(np.uint8)*40</span>\n<span class=\"sd\">    &gt;&gt;&gt;</span>\n<span class=\"sd\">    &gt;&gt;&gt; fig, axs = plt.subplots(2, 1, figsize=(9, 6), sharey=True)</span>\n<span class=\"sd\">    &gt;&gt;&gt; axs[0].imshow(image)</span>\n<span class=\"sd\">    &gt;&gt;&gt; axs[0].set_xlabel(&quot;test_image&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; axs[1].imshow(image)</span>\n<span class=\"sd\">    &gt;&gt;&gt; axs[1].set_xlabel(&quot;test_image with fitted splines&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; spline_table, shapes = compute_line_orientation(image, 20)</span>\n<span class=\"sd\">    &gt;&gt;&gt; spline_positions = spline_table[:,0:2]</span>\n<span class=\"sd\">    &gt;&gt;&gt; index = 0</span>\n<span class=\"sd\">    &gt;&gt;&gt; for i in range(len(shapes)):</span>\n<span class=\"sd\">    &gt;&gt;&gt;     axs[1].plot(spline_positions[index:index+shapes[i],1],spline_positions[index:index+shapes[i],0], c=&quot;r&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt;     index += shapes[i]</span>\n<span class=\"sd\">    &gt;&gt;&gt; plt.show()</span>\n\n<span class=\"sd\">    .. figure:: fig/spline_fitting.png</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">blur</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">blur</span><span class=\"p\">,</span> <span class=\"n\">blur</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># build threshold image</span>\n    <span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">threshold</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">THRESH_BINARY_INV</span> <span class=\"o\">+</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">THRESH_OTSU</span><span class=\"p\">)</span>\n    <span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">bitwise_not</span><span class=\"p\">(</span><span class=\"n\">thresh</span><span class=\"p\">)</span>\n\n    <span class=\"n\">skeleton</span> <span class=\"o\">=</span> <span class=\"n\">skeletonize_3d</span><span class=\"p\">((</span><span class=\"n\">thresh</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n    <span class=\"c1\"># contour = self.collapse_contours(contours)</span>\n    <span class=\"c1\">#cv2.imshow(&quot;asdf&quot;, skeleton * 255)</span>\n    <span class=\"c1\">#cv2.waitKey(0)</span>\n\n    <span class=\"n\">colormap</span> <span class=\"o\">=</span> <span class=\"n\">label</span><span class=\"p\">(</span><span class=\"n\">skeleton</span><span class=\"p\">,</span> <span class=\"n\">connectivity</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">colormap</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()):</span>\n        <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">colormap</span> <span class=\"o\">==</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">&gt;</span> <span class=\"n\">min_len</span><span class=\"p\">:</span>\n            <span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n                <span class=\"n\">skeleton</span><span class=\"p\">[</span><span class=\"n\">line</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">],</span> <span class=\"n\">line</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">point_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">point_fitted_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">gradient_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">line_itterator</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"n\">line_length</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">line_itterator</span> <span class=\"o\">&lt;</span> <span class=\"n\">line_length</span><span class=\"p\">:</span>\n        <span class=\"n\">line_itterator</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line_itterator</span><span class=\"p\">)</span>\n        <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"n\">line_itterator</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"k\">if</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">70</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">order_points_to_line</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span><span class=\"o\">&lt;</span><span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n            <span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n            <span class=\"n\">line_length</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">points</span><span class=\"p\">[</span><span class=\"n\">order</span><span class=\"p\">]</span>\n        <span class=\"c1\">#distance from one points to the next</span>\n        <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cumsum</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)))</span>\n\n        <span class=\"n\">direction_change</span> <span class=\"o\">=</span> <span class=\"mi\">9999999</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">distance</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">30</span> <span class=\"o\">&lt;</span> <span class=\"n\">distance</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n                <span class=\"n\">vec1</span> <span class=\"o\">=</span> <span class=\"n\">points</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">15</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">points</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"n\">vec2</span> <span class=\"o\">=</span> <span class=\"n\">points</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">30</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">points</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n                <span class=\"n\">direction</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">vec1</span><span class=\"p\">,</span> <span class=\"n\">vec2</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">direction</span> <span class=\"o\">&lt;</span> <span class=\"mi\">30</span><span class=\"p\">:</span>\n                    <span class=\"n\">direction_change</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span><span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"n\">distance</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">distance</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span> <span class=\"ow\">or</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">direction_change</span><span class=\"p\">:</span>\n                <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"n\">distance</span><span class=\"p\">[:</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n                <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">points</span><span class=\"p\">[:</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"n\">line_length</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_len</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">distance</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">distance</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">point_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Build a list of the spline function, one for each dimension:</span>\n        <span class=\"n\">smooth</span> <span class=\"o\">=</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">splines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UnivariateSpline</span><span class=\"p\">(</span><span class=\"n\">distance</span><span class=\"p\">,</span> <span class=\"n\">coords</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">spline</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"n\">smooth</span><span class=\"o\">*</span><span class=\"n\">expansion</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">coords</span> <span class=\"ow\">in</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">]</span>\n        <span class=\"n\">dsplines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">spline</span><span class=\"o\">.</span><span class=\"n\">derivative</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">spline</span> <span class=\"ow\">in</span> <span class=\"n\">splines</span><span class=\"p\">]</span>\n        <span class=\"n\">splines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UnivariateSpline</span><span class=\"p\">(</span><span class=\"n\">distance</span><span class=\"p\">,</span> <span class=\"n\">coords</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">spline</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"n\">smooth</span><span class=\"o\">*</span><span class=\"n\">expansion2</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">coords</span> <span class=\"ow\">in</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Computed the spline for the asked distances:</span>\n        <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">points_fitted</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">(</span><span class=\"n\">spl</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">spl</span> <span class=\"ow\">in</span> <span class=\"n\">splines</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"c1\">#append fitted points to</span>\n        <span class=\"n\">point_fitted_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">points_fitted</span><span class=\"p\">)</span>\n        <span class=\"n\">gradient_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">(</span><span class=\"n\">spl</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">spl</span> <span class=\"ow\">in</span> <span class=\"n\">dsplines</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">#plot results for testing purposes</span>\n        <span class=\"c1\">#plt.plot(points[..., 1], points[..., 0], color=&quot;g&quot;)</span>\n        <span class=\"c1\">#plt.plot(points_fitted[..., 1], points_fitted[..., 0])</span>\n\n    <span class=\"c1\">#sort results to array</span>\n    <span class=\"n\">result_table</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">shapes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">point_fitted_list</span><span class=\"p\">)):</span>\n        <span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">point_fitted_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">point_fitted_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n            <span class=\"n\">result_table</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">point_fitted_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">point_fitted_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]),</span>\n                                 <span class=\"n\">gradient_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">gradient_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">point_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">point_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">])],</span> <span class=\"p\">)</span>\n    <span class=\"n\">gradient_fitted_table</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">result_table</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#plt.show()</span>\n    <span class=\"k\">return</span> <span class=\"n\">gradient_fitted_table</span><span class=\"p\">,</span> <span class=\"n\">shapes</span></div>\n\n<div class=\"viewcode-block\" id=\"order_points_to_line\"><a class=\"viewcode-back\" href=\"../../../controllers.utility/#controllers.utility.order_points_to_line\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">order_points_to_line</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Determine the two nearest neighbors of each input point. Write the connectivity in a sparse matrix.</span>\n<span class=\"sd\">    Determine the order of the points.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    points: ndarray</span>\n<span class=\"sd\">        Sort input points (nx2) to a line</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    points: ndarray</span>\n<span class=\"sd\">        Sorted output points</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s2\">&quot;Wrong pointset dim </span><span class=\"si\">{points.shape[1]}</span><span class=\"s2\"> should be 2&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">NearestNeighbors</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n        <span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">kneighbors_graph</span><span class=\"p\">()</span>\n        <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">from_scipy_sparse_matrix</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n        <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">dfs_preorder_nodes</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"n\">order</span><span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"c1\">#todo: wright a valid exception !!!!</span>\n    <span class=\"k\">return</span> <span class=\"n\">order</span></div>\n\n<div class=\"viewcode-block\" id=\"get_candidates_accelerated\"><a class=\"viewcode-back\" href=\"../../../controllers.utility/#controllers.utility.get_candidates_accelerated\">[docs]</a><span class=\"nd\">@numba</span><span class=\"o\">.</span><span class=\"n\">jit</span><span class=\"p\">(</span><span class=\"n\">nopython</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_candidates_accelerated</span><span class=\"p\">(</span><span class=\"n\">maximum</span><span class=\"p\">,</span> <span class=\"n\">dis_transform</span><span class=\"p\">,</span> <span class=\"n\">image_canny</span><span class=\"p\">,</span> <span class=\"n\">canny_candidates</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Numba accelerated code (precompiles to C++) to calculate possible candidates for line profiling.</span>\n<span class=\"sd\">    I.e. The values of maximal distance for closed holes in the image.</span>\n<span class=\"sd\">    Should correspond to the maximum width of the SNC</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    maximum: float</span>\n<span class=\"sd\">        Max value of dis_tranform</span>\n<span class=\"sd\">    dis_transform: ndarray</span>\n<span class=\"sd\">        Distance transformed floodfill image. Gives the distance of an inclosed pixel to the next edge</span>\n<span class=\"sd\">    image_canny: ndarray</span>\n<span class=\"sd\">        Canny processed image</span>\n<span class=\"sd\">    canny_candidates: ndarray</span>\n<span class=\"sd\">        Empty array with size image_canny.shape</span>\n<span class=\"sd\">    threshold: float</span>\n<span class=\"sd\">        Threshold for a distance value to be accepted as a candidate</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">sub_array</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">maximum</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">maximum</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">dis_transform</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">dis_transform</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n            <span class=\"k\">if</span> <span class=\"n\">dis_transform</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">maximum</span> <span class=\"o\">&gt;</span> <span class=\"n\">dis_transform</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">j</span><span class=\"o\">+</span><span class=\"n\">maximum</span><span class=\"o\">&gt;</span> <span class=\"n\">dis_transform</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">maximum</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">j</span><span class=\"o\">-</span><span class=\"n\">maximum</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;out of bounds 1&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">maximum</span><span class=\"p\">):</span>\n                    <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">maximum</span><span class=\"p\">):</span>\n                        <span class=\"n\">sub_array</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dis_transform</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span><span class=\"o\">+</span><span class=\"n\">l</span><span class=\"p\">]</span>\n                <span class=\"n\">max_value</span><span class=\"o\">=</span> <span class=\"n\">sub_array</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">maximum</span><span class=\"p\">):</span>\n                    <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">maximum</span><span class=\"p\">):</span>\n                        <span class=\"k\">if</span> <span class=\"n\">dis_transform</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span><span class=\"o\">+</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">threshold</span><span class=\"o\">*</span><span class=\"n\">max_value</span><span class=\"p\">:</span>\n                            <span class=\"n\">dis_transform</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span><span class=\"o\">+</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"c1\"># get edges with minimal distance from middle of holes</span>\n    <span class=\"c1\"># cv2.cvtColor(image_canny,cv2.COLOR_GRAY2RGB)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">dis_transform</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">dis_transform</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n            <span class=\"k\">if</span> <span class=\"n\">dis_transform</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">maximum</span> <span class=\"o\">&gt;</span> <span class=\"n\">dis_transform</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">j</span><span class=\"o\">+</span><span class=\"n\">maximum</span><span class=\"o\">&gt;</span> <span class=\"n\">dis_transform</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">maximum</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">j</span><span class=\"o\">-</span><span class=\"n\">maximum</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;out of bounds 2&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">maximum</span><span class=\"p\">):</span>\n                    <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">maximum</span><span class=\"p\">):</span>\n                        <span class=\"n\">sub_array</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">image_canny</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span><span class=\"o\">+</span><span class=\"n\">l</span><span class=\"p\">]</span>\n                <span class=\"n\">dis_sub</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones_like</span><span class=\"p\">(</span><span class=\"n\">sub_array</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">255</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">sub_array</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n                    <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">sub_array</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n                        <span class=\"k\">if</span> <span class=\"n\">sub_array</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                            <span class=\"n\">dis_sub</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">((</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n                <span class=\"n\">min_value</span> <span class=\"o\">=</span> <span class=\"n\">dis_sub</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">sub_array</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n                    <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">sub_array</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n                        <span class=\"k\">if</span> <span class=\"n\">dis_sub</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">min_value</span><span class=\"p\">:</span>\n                            <span class=\"n\">canny_candidates</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">maximum</span><span class=\"o\">+</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></div>\n\n<span class=\"k\">def</span> <span class=\"nf\">line_profile</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">px_size</span><span class=\"o\">=</span><span class=\"mf\">0.032</span><span class=\"p\">,</span> <span class=\"n\">sampling</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">end</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"n\">px_size</span> <span class=\"o\">*</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">sampling</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">end</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">num</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">end</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">num</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">map_coordinates</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">calc_peak_distance</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"p\">):</span>\n    <span class=\"n\">split1</span> <span class=\"o\">=</span> <span class=\"n\">profile</span><span class=\"p\">[:</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)]</span>\n    <span class=\"n\">split2</span> <span class=\"o\">=</span> <span class=\"n\">profile</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">):]</span>\n    <span class=\"n\">distance</span><span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">split2</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">split1</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">()</span>\n    <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">split1</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">distance</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n    <span class=\"k\">return</span> <span class=\"n\">distance</span><span class=\"p\">,</span> <span class=\"n\">center</span>\n\n</pre></div>", "current_page_name": "_modules/controllers/utility", "sidebars": ["relations.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.10"}